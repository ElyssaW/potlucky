<style>
    .left {
        background-color: salmon;
        text-align: left;
        list-style-type: none;
        padding: 10px;
        border-radius: 15px;
        border-bottom-left-radius: 0;
        margin: 5px 0;
    }

    .right {
        background-color: #F9AD6A;
        text-align: right;
        list-style-type: none;
        padding: 10px;
        border-radius: 15px;
        border-bottom-right-radius: 0;
        margin: 5px 0;
    }

    #messages {
        overflow-y: auto;
        height: 79%;
        max-height: 420px;
        padding: 0;
        padding-right: 12px;
    }

    .chat-head {
        padding: 10px;
        font-weight: bolder;
    }

    .chat-sidebar {

    }

    #message-window {
        background-color: #f9E07F;
        position: relative;
        border-radius: 15px;
        top: 8vh;
        left: 22vw;
        width: 60vw;
        height: 70vh;
    }

    .chat-form {
        height: 20px;
        width: 100%;
    }

    #chat-text {
        height: 40px;
        width: 86%;
    }

    #chat-send {
        height: 40px;
        width: 12%;
        background-color: lightseagreen;
        border-bottom-right-radius: 15px;
        border: none;
    }

    .small-text {
        font-size: 12px; 
        margin: 0; 
        cursor: pointer;
        color: rgba(0, 0, 0, .6);
    }

    .userLi {
        background-color: cornsilk;
        list-style-type: none;
        padding: 10px;
        margin: 5px;
        border-radius: 15px;
    }

    #onlineUsers {
        padding: 10px;
    }

    ::-webkit-scrollbar {
        margin: 2px;
        width: 10px;
    }

    /* Track */
    ::-webkit-scrollbar-track {
        background: #f1f1f1;
    }

    /* Handle */
    ::-webkit-scrollbar-thumb {
        background: salmon;
    }

</style>

<div>
    <div>
        <div>
            <div id="message-window" class="row row-cols-2">
                <div style="background-color: lightseagreen;" class="col-lg-4 chat-sidebar">
                    <h3 class="online-users" style="padding: 10px;">Online Users</h3>
                    <ul id="onlineUsers"></ul>
                </div>
                <div id="chat-window" class=" col-md">
                    <div class="chat-head">
                        <span class="chat-title">Chat with <%= user.name %></span>
                    </div>
                    
                    <ul id="messages">
                        <% user.messages.forEach((message, i) => { %>
                            <% if (message.senderId === currentUser.id) { %>
                                <li class="right">
                                    <span><%= message.content %></span>
                                </li>
                            <% } else if (message.receiverId === currentUser.id) { %>
                                <li class="left"><%= message.content %></li>
                            <% } %>
                       <% }) %>
                    </ul>
            
                    <form id="chat-form" autocomplete="off" action="">
                        <input type="text" id="chat-text">
                        <input type="submit" id="chat-send" value="send">
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<% let targetUser = user.id %>

<script src="/socket.io/socket.io.js"></script>
<script>
    // Instantiate socket
    let socket = io({
        extraHeaders: {
            userId: <%= currentUser.id %>
        }
    })
    //Client-side list of online users, to check against when a connection event is
    // received from the server, to prevent duplicate entries if people drop and rejoin
    let userArray = []

    messages.scrollTo(0, document.body.scrollHeight)
            

    // Grab DOM elements
    let myForm = document.getElementById('chat-form')
    let myInput = document.getElementById('chat-text')

    // Add event listener
    myForm.addEventListener('submit', e => {
        // Prevent default
        e.preventDefault()
        // Check if input is empty
        if (myInput.value) {
            // Emit message and reset input to empty
            console.log(<%= currentUser.id %>)
            console.log(<%= user.id %>)
            console.log(<%= targetUser %>)
            socket.emit('private message', myInput.value, <%= targetUser %>)
        }
    })

    // Triggers on response from server, which should be received whenever a message is sent
    socket.on('message sent', msgId => {
        // Create new list item to contain message
        let item = document.createElement('li')
        item.innerText = myInput.value
        item.setAttribute('class', 'right')
        messages.appendChild(item)

        // Go to the message and reset input bar
        messages.style.overflowY = 'auto'
        messages.scrollTo(0, document.body.scrollHeight)
        myInput.value = ''
    })

    socket.on('private message', (msg, targetId, msgId) => {
        console.log(targetId) 
            let item = document.createElement('li')
            item.innerText = msg
            item.setAttribute('class', 'left')

            messages.appendChild(item)
            messages.style.overflowY = 'auto'
            messages.scrollTo(0, document.body.scrollHeight)
    })

    socket.on('currently online', userList => {
        console.log('User list')
        console.log(userList)

        let users = Object.getOwnPropertyNames(userList)
        users.forEach(element => {
            if (!userArray.includes(element)) {
                let item = document.createElement('li')
                item.setAttribute('class', 'userLi')
                item.setAttribute('id', element)
                onlineUsers.appendChild(item)

                let a = document.createElement('a')
                a.setAttribute('href', '/message/' + element)
                item.appendChild(a)

                let span = document.createElement('span')
                span.innerText = `User ${element} is online`
                a.appendChild(span)
                
                userArray.push(element)
            }
        })
    })

</script>